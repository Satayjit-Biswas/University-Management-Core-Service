// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id String @id @default(uuid())
  name String
}

model AcademicSemester {
  id String @id @default(uuid())
  year Int
  title String
  code String
  startMonth String
  endMonth String
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id String @id @default(uuid())
  title String

  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicDepartments AcademicDepartment[]
  students Student[]
  faculties Faculty[]

  @@map("academic_facultys")
}

model AcademicDepartment {
  id String @id @default(uuid())
  title String
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFacultyId String 
  academicFaculty AcademicFaculty @relation( fields: [academicFacultyId],references: [id])

  students Student[]

  faculties Faculty[]


  @@map("academic_departments")
}

model Student {
  id String @id @default(uuid())
  studentId String
  firstName String
  lastName String
  middleName String?
  profileImage String
  email String
  contactNo String
  gender String
  bloodGroup String
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicSemesterId String 
  academicSemester AcademicSemester @relation( fields: [academicSemesterId],references: [id])
  
  academicDepartmentId String 
  academicDepartment AcademicDepartment @relation( fields: [academicDepartmentId],references: [id])

  academicFacultyId String 
  academicFaculty AcademicFaculty @relation( fields: [academicFacultyId],references: [id])
  

  @@map("students")
}

model Faculty {
  id String @id @default(uuid())
  facultyId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo String
  gender String
  bloodGroup String
  designation  String
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  academicDepartmentId String 
  academicDepartment AcademicDepartment @relation( fields: [academicDepartmentId],references: [id])

  academicFacultyId String 
  academicFaculty AcademicFaculty @relation( fields: [academicFacultyId],references: [id])


  courseFaculty CourseFaculty[]

  @@map("facultys")
}

model Building {
  id String @id @default(uuid())
  title  String
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  rooms Room[]

  @@map("building")
}

model Room {
  id String @id @default(uuid())
  roomNumber  String
  floor String
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  buildingId String 
  building Building @relation( fields: [buildingId],references: [id])


  @@map("rooms")
}

model Course {
  id String @id @default(uuid())
  title String
  code String
  credits Int @default(0)
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  preRequisite CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  courseFaculty CourseFaculty[]

  @@map("courses")
}


model CourseToPrerequisite {
  
  courseld String 
  course Course @relation( fields: [courseld],references: [id],name: "CourseToPrerequisite")

  prerequisiteld String
  prerequisite Course @relation( fields: [prerequisiteld],references: [id],name: "PrerequisiteToCourse")

  @@id([courseld,prerequisiteld])

  @@map("coursetoprerequisite")
}

model CourseFaculty {
  courseId String 
  course Course @relation( fields: [courseId],references: [id])

  facultyId String
  faculty Faculty @relation( fields: [facultyId],references: [id])

  @@id([courseId,facultyId])

  @@map("course_facultys")
}