// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model user {
    id   String @id @default(uuid())
    name String
}

model AcademicSemester {
    id                    String                 @id @default(uuid())
    year                  Int
    title                 String
    code                  String
    startMonth            String
    endMonth              String
    createAt              DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    students              Student[]
    semesterRegistrations SemesterRegistration[]

    @@map("academic_semesters")
}

model AcademicFaculty {
    id                  String               @id @default(uuid())
    title               String
    createAt            DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    academicDepartments AcademicDepartment[]
    students            Student[]
    faculties           Faculty[]

    @@map("academic_facultys")
}

model AcademicDepartment {
    id                String          @id @default(uuid())
    title             String
    createAt          DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
    academicFacultyId String
    academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
    students          Student[]
    faculties         Faculty[]
    offeredCourses    OfferedCourse[]

    @@map("academic_departments")
}

model Student {
    id                   String             @id @default(uuid())
    studentId            String
    firstName            String
    lastName             String
    middleName           String?
    profileImage         String
    email                String
    contactNo            String
    gender               String
    bloodGroup           String
    createAt             DateTime           @default(now())
    updatedAt            DateTime           @updatedAt
    academicSemesterId   String
    academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
    academicDepartmentId String
    academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
    academicFacultyId    String
    academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])

    @@map("students")
}

model Faculty {
    id                          String                       @id @default(uuid())
    facultyId                   String
    firstName                   String
    lastName                    String
    middleName                  String
    profileImage                String
    email                       String
    contactNo                   String
    gender                      String
    bloodGroup                  String
    designation                 String
    createAt                    DateTime                     @default(now())
    updatedAt                   DateTime                     @updatedAt
    academicDepartmentId        String
    academicDepartment          AcademicDepartment           @relation(fields: [academicDepartmentId], references: [id])
    academicFacultyId           String
    academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
    courseFaculty               CourseFaculty[]
    offeredCourseClassSchedules OfferedCourseClassSchedule[]

    @@map("facultys")
}

model Building {
    id        String   @id @default(uuid())
    title     String
    createAt  DateTime @default(now())
    updatedAt DateTime @updatedAt
    rooms     Room[]

    @@map("building")
}

model Room {
    id                          String                       @id @default(uuid())
    roomNumber                  String
    floor                       String
    createAt                    DateTime                     @default(now())
    updatedAt                   DateTime                     @updatedAt
    buildingId                  String
    building                    Building                     @relation(fields: [buildingId], references: [id])
    offeredCourseClassSchedules OfferedCourseClassSchedule[]

    @@map("rooms")
}

model Course {
    id              String                 @id @default(uuid())
    title           String
    code            String
    credits         Int                    @default(0)
    createAt        DateTime               @default(now())
    updatedAt       DateTime               @updatedAt
    preRequisite    CourseToPrerequisite[] @relation("CourseToPrerequisite")
    preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
    courseFaculty   CourseFaculty[]
    offeredCourses  OfferedCourse[]

    @@map("courses")
}

model CourseToPrerequisite {
    courseld       String
    course         Course @relation(fields: [courseld], references: [id], name: "CourseToPrerequisite")
    prerequisiteld String
    prerequisite   Course @relation(fields: [prerequisiteld], references: [id], name: "PrerequisiteToCourse")

    @@id([courseld, prerequisiteld])
    @@map("coursetoprerequisite")
}

model CourseFaculty {
    courseId  String
    course    Course  @relation(fields: [courseId], references: [id])
    facultyId String
    faculty   Faculty @relation(fields: [facultyId], references: [id])

    @@id([courseId, facultyId])
    @@map("course_facultys")
}

model SemesterRegistration {
    id                          String                       @id @default(uuid())
    startData                   DateTime
    endDate                     DateTime
    status                      SemesterRegistrationStatus?  @default(UPCOMING)
    minCredit                   Int                          @default(0)
    maxCredit                   Int                          @default(0)
    createAt                    DateTime                     @default(now())
    updatedAt                   DateTime                     @updatedAt
    academicSemesterId          String
    academicSemester            AcademicSemester             @relation(fields: [academicSemesterId], references: [id])
    offeredCourses              OfferedCourse[]
    offeredCourseSections       OfferedCourseSection[]
    offeredCourseClassSchedules OfferedCourseClassSchedule[]

    @@map("semester_registrations")
}

model OfferedCourse {
    id                     String                 @id @default(uuid())
    createAt               DateTime               @default(now())
    updatedAt              DateTime               @updatedAt
    courseId               String
    course                 Course                 @relation(fields: [courseId], references: [id])
    academicDepartmentId   String
    academicDepartment     AcademicDepartment     @relation(fields: [academicDepartmentId], references: [id])
    SemesterRegistrationId String
    semesterRegistration   SemesterRegistration   @relation(fields: [SemesterRegistrationId], references: [id])
    offeredCourseSections  OfferedCourseSection[]

    @@map("offered_courses")
}

model OfferedCourseSection {
    id                          String                       @id @default(uuid())
    title                       String
    maxCapacity                 Int
    currentlyEnrolledStudent    Int                          @default(0)
    offeredCoursedId            String
    offeredCoursed              OfferedCourse                @relation(fields: [offeredCoursedId], references: [id])
    semesterRegistrationId      String
    semesterRegistration        SemesterRegistration         @relation(fields: [semesterRegistrationId], references: [id])
    createAt                    DateTime                     @default(now())
    updatedAt                   DateTime                     @updatedAt
    offeredCourseClassSchedules OfferedCourseClassSchedule[]

    @@map("offered_course_sections")
}

model OfferedCourseClassSchedule {
    id                     String               @id @default(uuid())
    dayOfWeek              WeekDays             @default(SATURDAY)
    startTime              String
    endTime                String
    createAt               DateTime             @default(now())
    updatedAt              DateTime             @updatedAt
    offeredCourseSectionId String
    offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
    semesterRegistrationId String
    semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
    roomId                 String
    room                   Room                 @relation(fields: [roomId], references: [id])
    facultyId              String
    faculty                Faculty              @relation(fields: [facultyId], references: [id])

    @@map("offered_course_class_schedules")
}

enum SemesterRegistrationStatus {
    UPCOMING
    ONGOING
    ENDED
}

enum WeekDays {
    SATURDAY
    SUNDAY
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
}
